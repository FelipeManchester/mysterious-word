{"version":3,"sources":["data/words.js","components/StartScreen.js","components/Game.js","components/GameOver.js","App.js","reportWebVitals.js","index.js"],"names":["wordsList","carro","fruta","corpo","computador","programação","alimento","StartScreen","_ref","startGame","react_default","a","createElement","className","onClick","Game","verifyLetter","pickedCategory","pickedWord","letters","guessedLetters","wrongLetters","guesses","score","_useState","useState","_useState2","Object","slicedToArray","letter","setLetter","letterInputRef","useRef","map","i","includes","key","onSubmit","e","preventDefault","current","focus","type","name","maxLength","required","onChange","target","value","ref","GameOver","retry","stages","id","guessesQty","App","gameStage","setGameStage","_useState3","words","_useState5","_useState6","setPickedWord","_useState7","_useState8","setPickedCategory","_useState9","_useState10","setLetters","_useState11","_useState12","setGuessedLetters","_useState13","_useState14","setWrongLetters","_useState15","_useState16","setGuesses","_useState17","_useState18","setScore","pickWordAndCategory","useCallback","categories","keys","category","Math","floor","random","length","word","clearLetterStates","_pickWordAndCategory","wordLetters","split","l","toLowerCase","useEffect","uniqueLetters","toConsumableArray","Set","actualScore","src_components_StartScreen","src_components_Game","normalizedLetter","actualGuessedLetters","concat","actualWrongLetters","actualGuesses","src_components_GameOver","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.35cd390f.chunk.js","sourcesContent":["export const wordsList = {\n  carro: ['Motor', 'Porta', 'Capô', 'Pneu', 'Antena'],\n  fruta: ['Banana', 'Maçã', 'Pêra', 'Mamão', 'Laranja'],\n  corpo: ['Braço', 'Perna', 'Cérebro', 'Pescoço', 'Olhos'],\n  computador: ['Mouse', 'Teclado', 'Monitor', 'Gabinete'],\n  programação: ['Linguagem', 'Framework', 'JavaScript', 'React'],\n  alimento: ['Arroz', 'Feijão', 'Carne', 'Leite', 'Ovo'],\n};\n","import './StartScreen.css';\nimport React from 'react';\n\nconst StartScreen = ({ startGame }) => {\n  return (\n    <div className=\"start\">\n      <h1>\n        Palavra\n        <span>\n          <em>M</em>isteriosa\n        </span>\n      </h1>\n      <button onClick={startGame}>Começar o jogo</button>\n    </div>\n  );\n};\n\nexport default StartScreen;\n","import './Game.css';\nimport React from 'react';\nimport { useState } from 'react';\nimport { useRef } from 'react';\n\nconst Game = ({\n  verifyLetter,\n  pickedWord,\n  pickedCategory,\n  letters,\n  guessedLetters,\n  wrongLetters,\n  guesses,\n  score,\n}) => {\n  const [letter, setLetter] = useState('');\n  const letterInputRef = useRef(null);\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    verifyLetter(letter);\n\n    setLetter('');\n\n    letterInputRef.current.focus();\n  };\n\n  return (\n    <div className=\"game\">\n      <p className=\"points\">\n        <span>Pontuação: {score}</span>\n      </p>\n      <h1>Advinhe a palavra:</h1>\n      <h3 className=\"tip\">\n        Dica sobre a palavra: <span>{pickedCategory}</span>\n      </h3>\n      <p>Você ainda tem {guesses} tentativa(s).</p>\n      <div className=\"wordContainer\">\n        {letters.map((letter, i) =>\n          guessedLetters.includes(letter) ? (\n            <span key={i} className=\"letter\">\n              {letter}\n            </span>\n          ) : (\n            <span key={i} className=\"blankSquare\"></span>\n          ),\n        )}\n      </div>\n      <div className=\"letterContainer\">\n        <p>Tente advinhar uma letra da palavra:</p>\n        <form onSubmit={handleSubmit}>\n          <input\n            type=\"text\"\n            name=\"letter\"\n            maxLength=\"1\"\n            required\n            onChange={(e) => setLetter(e.target.value)}\n            value={letter}\n            ref={letterInputRef}\n          />\n          <button>Jogar!</button>\n        </form>\n      </div>\n      <div className=\"wrongLettersContainer\">\n        <p>Letras já utilizadas:</p>\n        {wrongLetters.map((letter, i) => (\n          <span key={i}>{letter}, </span>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Game;\n","import './GameOver.css';\nimport React from 'react';\n\nconst GameOver = ({ retry, score }) => {\n  return (\n    <div>\n      <h1>Fim de jogo!</h1>\n      <h2>\n        A sua pontuação foi: <span>{score}</span>\n      </h2>\n      <button onClick={retry}>Jogar novamente</button>\n    </div>\n  );\n};\n\nexport default GameOver;\n","// CSS\nimport './App.css';\n\n// React\nimport React from 'react';\nimport { useCallback, useEffect, useState } from 'react';\n\n// data\nimport { wordsList } from './data/words';\n\n// components\nimport StartScreen from './components/StartScreen';\nimport Game from './components/Game';\nimport GameOver from './components/GameOver';\n\nconst stages = [\n  { id: 1, name: 'start' },\n  { id: 2, name: 'game' },\n  { id: 3, name: 'end' },\n];\n\nconst guessesQty = 3;\n\nfunction App() {\n  const [gameStage, setGameStage] = useState(stages[0].name);\n  const [words] = useState(wordsList);\n  const [pickedWord, setPickedWord] = useState('');\n  const [pickedCategory, setPickedCategory] = useState('');\n  const [letters, setLetters] = useState([]);\n  const [guessedLetters, setGuessedLetters] = useState([]);\n  const [wrongLetters, setWrongLetters] = useState([]);\n  const [guesses, setGuesses] = useState(guessesQty);\n  const [score, setScore] = useState(0);\n\n  const pickWordAndCategory = useCallback(() => {\n    // pick a random category\n    const categories = Object.keys(words);\n    const category =\n      categories[Math.floor(Math.random() * Object.keys(categories).length)];\n    // pick a random word\n    const word =\n      words[category][Math.floor(Math.random() * words[category].length)];\n\n    return { word, category };\n  }, [words]);\n  // starts the game\n  const startGame = useCallback(() => {\n    // clear all letters\n    clearLetterStates();\n    // pick word and pick category\n    const { word, category } = pickWordAndCategory();\n\n    // create an array of letters\n    let wordLetters = word.split('');\n    wordLetters = wordLetters.map((l) => l.toLowerCase());\n\n    // fill states\n    setPickedWord(word);\n    setPickedCategory(category);\n    setLetters(wordLetters);\n    setGameStage(stages[1].name);\n  }, [pickWordAndCategory]);\n\n  // process the letter input\n\n  const verifyLetter = (letter) => {\n    const normalizedLetter = letter.toLowerCase();\n\n    // check if letter has already been utilized\n    if (\n      guessedLetters.includes(normalizedLetter) ||\n      wrongLetters.includes(normalizedLetter)\n    ) {\n      return;\n    }\n\n    // push guessed letter or remove a guess\n    if (letters.includes(normalizedLetter)) {\n      setGuessedLetters((actualGuessedLetters) => [\n        ...actualGuessedLetters,\n        normalizedLetter,\n      ]);\n    } else {\n      setWrongLetters((actualWrongLetters) => [\n        ...actualWrongLetters,\n        normalizedLetter,\n      ]);\n\n      setGuesses((actualGuesses) => actualGuesses - 1);\n    }\n  };\n\n  const clearLetterStates = () => {\n    setGuessedLetters([]);\n    setWrongLetters([]);\n  };\n  // check if guesses ended\n  useEffect(() => {\n    if (guesses <= 0) {\n      // reset all states\n      clearLetterStates();\n      setGameStage(stages[2].name);\n    }\n  }, [guesses]);\n\n  // check win condition\n\n  useEffect(() => {\n    const uniqueLetters = [...new Set(letters)];\n\n    // win condition\n    if (\n      guessedLetters.length === uniqueLetters.length &&\n      gameStage === stages[1].name\n    ) {\n      // add score\n      setScore((actualScore) => (actualScore += 100));\n\n      // restart game with new word\n      startGame();\n    }\n  }, [guessedLetters, letters, startGame, gameStage]);\n\n  // restart the game\n  const retry = () => {\n    setScore(0);\n    setGuesses(guessesQty);\n\n    setGameStage(stages[0].name);\n  };\n  return (\n    <div className=\"App\">\n      {gameStage === 'start' && <StartScreen startGame={startGame} />}\n      {gameStage === 'game' && (\n        <Game\n          verifyLetter={verifyLetter}\n          pickedWord={pickedWord}\n          pickedCategory={pickedCategory}\n          letters={letters}\n          guessedLetters={guessedLetters}\n          wrongLetters={wrongLetters}\n          guesses={guesses}\n          score={score}\n        />\n      )}\n      {gameStage === 'end' && <GameOver retry={retry} score={score} />}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}